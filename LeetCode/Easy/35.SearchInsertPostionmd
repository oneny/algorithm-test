# 35. Search Insert Position

> [35. Search Insert Position](https://leetcode.com/problems/search-insert-position/)

## 내가 푼 솔루션

```js
/**
 * You must write an algorithm with O(log n) runtime complexity.
 * 
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */

var searchInsert = function(nums, target) {
  let start = 0;
  let end = nums.length - 1;
  
  while (start < end) {
    let middle = Math.floor((start + end) / 2);
    if (nums[middle] === target) return middle;

    nums[middle] > target ? end = middle : start = middle + 1;
  }

  // 마지막 요소를 가리킨다면 + 1 해줘야 한다.
  return target <= nums[start] ? start : start + 1;
};
```

Runtime: 85 ms, faster than 69.25% of JavaScript online submissions for Search Insert Position.
Memory Usage: 42.3 MB, less than 36.85% of JavaScript online submissions for Search Insert Position.

## 다른 사람 솔루션

```js
function searchInsert(nums, target) {
  let start = 0;
  let end = nums.length - 1;

  while (start <= end) {
    let middle = Math.floor((start + end) / 2);
    let midValue = nums[middle];

    if (midValue > target) end = middle - 1;
    else if (midValue < target) start = middle + 1;
    else return middle;
  }

  return start;
}
```

Runtime: 71 ms, faster than 84.50% of JavaScript online submissions for Search Insert Position.
Memory Usage: 42.3 MB, less than 36.85% of JavaScript online submissions for Search Insert Position.